name: Desplegar la aplicacion
on:
  push:
    branches:
      - master
    paths:
      - config/**
      - training/**
      - application/**
      - .github/workflows/deploy_app.yaml
jobs:
  deploy_app:
    name: Desplegar la aplicacion
    runs-on: ubuntu-latest
    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
    steps:
      - name: Checkout sobre el proyecto en GitHub
        id: checkout
        uses: actions/checkout@v3

      - name: ConfiguraciÃ³n del ambiente
        uses: actions/setup-python@v3
        with:
          python-version: 3.11
          cache: pip

      - name: Instalar paquetes necesarios
        run: pip install -r requirements.txt

      - name: Se obtienen los datos y se validan
        run: |
          dvc remote modify origin --local auth basic
          dvc remote modify origin --local user ${{ secrets.DAGSHUB_USERNAME }}
          dvc remote modify origin --local password ${{ secrets.DAGSHUB_TOKEN }}
          dvc pull -r origin train_model

      - name: Se autentica en Heroku
        run: |
          cat > ~/.netrc <<EOF
            machine api.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
            machine git.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
          EOF
        
      - name: Se autentica en el manejo de contenedores de Heroku
        run: heroku container:login

      - name: Se despliega la API a Heroku
        run: |
          cd application/src
          APP_NAME=api-predict-plague
          heroku container:push web --app $APP_NAME
          heroku container:release web --app $APP_NAME

      - name: Se despliega la aplicacion a Heroku
        run: |
          cd application/src/webapp
          WEB_NAME=web-predict-plague
          heroku container:push web --app $WEB_NAME
          heroku container:release web --app $WEB_NAME